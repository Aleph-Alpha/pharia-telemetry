stages:
  - lint
  - test
  - build

variables:
  # Use Python 3.10 for builds (minimum supported version for compatibility)
  BUILD_IMAGE: ghcr.io/astral-sh/uv:python3.10-bookworm-slim
  
# Cache dependencies to speed up builds
.cache_template: &cache_template
  cache:
    key: 
      files:
        - uv.lock
        - pyproject.toml
    paths:
      - .venv/
      - ~/.cache/uv/

lint:
  stage: lint
  image: $BUILD_IMAGE
  <<: *cache_template
  script:
    - uv sync --group dev
    - uv run ruff check .
    - uv run ruff format --check .
    - uv run mypy --install-types --non-interactive src/
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

test:
  stage: test
  <<: *cache_template
  parallel:
    matrix:
      - PYTHON_VERSION: ["3.10", "3.11", "3.12", "3.13"]
  image: ghcr.io/astral-sh/uv:python${PYTHON_VERSION}-bookworm-slim
  script:
    - uv sync --group dev
    - uv run pytest --cov=pharia_telemetry --cov-report=xml --cov-report=term-missing
  coverage: '/TOTAL.*\s+(\d+%)$/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.xml
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

build:
  stage: build
  image: $BUILD_IMAGE
  <<: *cache_template
  script:
    - uv build
    - uv run twine check dist/*
  artifacts:
    paths:
      - dist/
    expire_in: 1 week
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "develop"

